# -*- coding: utf-8 -*-
"""Car Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/161GuJu2eE61Kb0EXG_0nnzUZWOxvAsUP

Importing the Dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Collection and Processing"""

#loading he daa from csv file to pandas dataframe

car_dataset = pd.read_csv('/content/car data.csv')

# Inspecting the first 5 rows of the dataframe

car_dataset.head()

# Checking the number f rows and columns

car_dataset.shape

# Getting sme information abut the dataset

car_dataset.info()

# Checking he number of missing values

car_dataset.isnull().sum()

# Cheking he distribution of categorical data

print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the Categorical Data"""

# Encoding "Fuel_Type" Column

car_dataset.replace({'Fuel_Type':{'Petrol':0, 'Diesel':1,'CNG':2}},inplace=True)


# Encoding "Seller_Type" Column

car_dataset.replace({'Seller_Type':{'Dealer':0, 'Individual':1}},inplace=True)


# Encoding "Transmission" Column

car_dataset.replace({'Transmission':{'Manual':0, 'Automatic':1}},inplace=True)

car_dataset.head()

"""Splitting the data into Training Data and Test Data"""

X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y = car_dataset['Selling_Price']

print(X)

print(Y)

"""Splitting Training and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.1, random_state=2)

"""Model Training

1. Linear Regression
"""

# Linear Regression Model

linear_regression_model = LinearRegression()

linear_regression_model.fit(X_train,Y_train)

"""=> Model Evaluation

"""

# Prediction on Training Data

training_data_prediction = linear_regression_model.predict(X_train)

# R squared Error

error_score = metrics.r2_score(Y_train, training_data_prediction)
print('R squared Error : ',error_score)

"""=> Visualize the actual prices and predicted prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Prediction on Training Data

test_data_prediction = linear_regression_model.predict(X_test)

# R squared Error

error_score = metrics.r2_score(Y_test, test_data_prediction)
print('R quared Error : ', error_score)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show

"""2. Lasso Regression"""

# Lasso Regression Model

lasso_regression_model = Lasso()

lasso_regression_model.fit(X_train,Y_train)

"""=> Model Evaluation

"""

# Prediction on Training Data

training_data_prediction = lasso_regression_model.predict(X_train)

# R squared Error

error_score = metrics.r2_score(Y_train, training_data_prediction)
print('R squared Error : ',error_score)

"""=> Visualize the actual prices and predicted prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Prediction on Training Data

test_data_prediction = lasso_regression_model.predict(X_test)

# R squared Error

error_score = metrics.r2_score(Y_test, test_data_prediction)
print('R quared Error : ', error_score)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show